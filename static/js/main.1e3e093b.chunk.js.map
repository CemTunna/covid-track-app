{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","value","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCounriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e3e093b.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport './InfoBox.css';\r\nconst InfoBox = ({ title, cases, isRed, active, total, ...props }) => {\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${active && 'infoBox--selected'} ${\r\n        isRed && 'infoBox--red'\r\n      }  `}\r\n    >\r\n      <CardContent>\r\n        <Typography className='infoBox__title' color='textSecondary'>\r\n          {title}\r\n        </Typography>\r\n        <h2 className={`infoBox__cases ${!isRed && 'infoBox__cases--green'}`}>\r\n          {cases}\r\n        </h2>\r\n        <Typography className='infoBox__total' color='textSecondary'>\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default InfoBox;\r\n","import React from 'react';\r\nimport numeral from 'numeral';\r\nimport { Circle, Popup } from 'react-leaflet';\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: '#CC1034',\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: '#7dd71d',\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: '#fb4443',\r\n    multiplier: 2000,\r\n  },\r\n};\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n  sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n  return sortedData;\r\n};\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format('0.0a')}` : '+0';\r\n\r\nexport const showDataOnMap = (data, casesType = 'cases') =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className='info-container'>\r\n          <div\r\n            className='info-flag'\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          />\r\n          <div className='info-name'>{country.country}</div>\r\n          <div className='info-confirmed'>\r\n            Total Cases: {numeral(country.cases).format('0,0')}\r\n          </div>\r\n          <div className='info-recovered'>\r\n            Total Recovered: {numeral(country.recovered).format('0,0')}\r\n          </div>\r\n          <div className='info-deaths'>\r\n            Total Deaths: {numeral(country.deaths).format('0,0')}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from 'react';\r\nimport { Map as LeafletMap, TileLayer } from 'react-leaflet';\r\nimport './Map.css';\r\nimport { showDataOnMap } from './util';\r\nconst Map = ({ countries, casesType, center, zoom }) => {\r\n  return (\r\n    <div className='map'>\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\r\n          attribution='&copy;<a href=\"http://osm.org/copyright\">OpnStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n","import React from 'react';\r\nimport numeral from 'numeral';\r\nimport './Table.css';\r\nconst Table = ({ countries }) => {\r\n  return (\r\n    <div className='table'>\r\n      {countries.map(({ country, cases }) => (\r\n        <tr>\r\n          <td>{country}</td>\r\n          <td>\r\n            <strong>{numeral(cases).format('0,0')}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from 'numeral';\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: 'index',\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem).format('+0.0');\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: 'time',\r\n        time: {\r\n          format: 'MM/DD/YY',\r\n          tooltipFormat: 'll',\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format('0a');\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\nconst buildChartData = (data, casesType) => {\r\n  const chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      const newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\nconst LineGraph = ({ casesType = 'cases', ...props }) => {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=30')\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          console.log(chartData);\r\n          setData(chartData);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          options={options}\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: 'rgba(204,16,52,0.5)',\r\n                borderColor: '#CC1034',\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from 'react';\nimport {\n  Card,\n  CardContent,\n  FormControl,\n  MenuItem,\n  Select,\n} from '@material-ui/core';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport './App.css';\nimport { sortData } from './util';\nimport LineGraph from './LineGraph';\nimport 'leaflet/dist/leaflet.css';\nimport { prettyPrintStat } from './util';\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState('cases');\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n  useEffect(() => {\n    const getCounriesData = async () => {\n      await fetch('https://disease.sh/v3/covid-19/countries')\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        });\n    };\n\n    getCounriesData();\n  }, []);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url =\n      countryCode === 'worldwide'\n        ? 'https://disease.sh/v3/covid-19/all'\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n  console.log('counryınfo', countryInfo);\n  return (\n    <div className='app'>\n      <div className='app__left'>\n        {' '}\n        <div className='app__header'>\n          <h1>COVID-19 TRACKER </h1>\n          <FormControl className='app__dropdown'>\n            <Select\n              variant='outlined'\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value='worldwide'>Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className='app__stats'>\n          <InfoBox\n            isRed\n            active={casesType === 'cases'}\n            onClick={(e) => setCasesType('cases')}\n            title='Coronavirus cases'\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)}\n          />\n          <InfoBox\n            active={casesType === 'recovered'}\n            onClick={(e) => setCasesType('recovered')}\n            title='Recovered'\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)}\n          />\n          <InfoBox\n            isRed\n            active={casesType === 'deaths'}\n            onClick={(e) => setCasesType('deaths')}\n            title='Deaths'\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n        <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className='app__right'>\n        <CardContent>\n          <h3>Live Cases By Country</h3>\n          <Table countries={tableData} />\n          <h3 className='app__graphTitle'>Worldwide new {casesType}</h3>\n          <LineGraph className='app__graph' casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}